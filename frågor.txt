Push är ett kommando som används för att ladda upp commits man gjort i sitt lokala repository till ett remote repository på t.ex. github. 

Pull är kommandot som används för att hämta commits från ett remote repository och merge dem med sina lokala filer/repository.  Pull är faktisk ett kommando som kombinerar två andra kommandon: fetch och merge. Om man vill ladda ner commits
till sitt repository men inte merge dem direkt utan kolla på dem först, så kan man använda kommandot först. Detta kan vara bra om man t.ex. har ett team som tillsammans jobbar på ett program och pushar commits till ett remote repository; 
kanske är det bra att kolla vad andra har pushat innan man merge med sina lokala filer för att säkerställa att det kommer gå bra. Efter att ha fetch:at så kan man använda kommandot merge, vilket synkar remote commits med ens lokala
repository. 

Log (git log) är ett kommando som används för att visa historiken av commits. Varje commit identifieras av en unik hash, som består av en massa tecken. Om man använder flaggan —oneline så kan man få en kortare identifierande sträng som endast
består av 7 tecken (checksum). 

Status är ett kommando som används för att rapportera den nuvarande statusen i working directory och staging area. Staging area är där filer läggs till när man använder kommandot git add, det är dem filerna man vill ha med i nästa commit.
Status-kommandot visar även om det finns untracked files, samt vilken branch man befinner sig på och om den är up to date med ett eventuellt remote repository. 

Brancher i git är separata utvecklingslinjer som är användbara på flera sätt. När man skapar en branch så skapas en kopia av ens current repository som sparas i en separat utvecklingslinje(branch), och när man jobbar i den så påverkas inte 
main/master branchen. Skulle man t.ex. skapa en fil i en branch, så kommer den filen inte att existera i ens main/master branch (om man inte mergar dem). Detta är som sagt väldigt användbart. Om man t.ex. vill testa en ny idé utan att råka
förstöra det man jobbat på hittils, så kan man bara skapa en ny branch och testa sin idé säkert där. Skulle det inte gå som man hade tänkt, så kan man bara återgå till versionen som är kvar i main/master branchen. Brancher är även användbart
om man vill jobba på flera versioner av ens projekt pararellt. Det är vanligt att använda sig av feature-brancher, alltså brancher som används för att tillföra nya funktioner. Bugfix brancher används för felsökning och release branches är 
en sista vanlig typ av branch, som används för att förbereda release av ett program. 

Git reset är ett sätt för att gå tillbaka i historiken. Reset kan påverka historiken, men det beror på vilken flagga man kombinerar kommandot med.

Om man använder flaggan —soft, så flyttas HEAD tillbaka till en tidigare commit och ändringarna är kvar i staging area samt i working directory. Detta betyder alltså att man kan commita exakt samma ändringar igen, man måste inte 
nödvändigtvis ändra något. En fördel med detta är att man kan t.ex. rätta till något som blev fel när man commita, t.ex. meddelandet. För att visa hur det fungerar så skapar jag en branch i mitt projekt, där jag kan testa olika reset 
kommandon utan att det påverkar main branchen.
